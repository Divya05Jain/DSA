#include <iostream>
#include <vector>
#include <unordered_map>

using namespace std;

// Helper function to backtrack and distribute integers
bool canDistributeHelper(vector<int>& counts, vector<int>& groups, int index) {
    if (index == counts.size()) {
        // If all frequencies are distributed, check if all groups are filled
        for (int group : groups) {
            if (group == 0) return false; // Any group left empty
        }
        return true;
    }

    for (int i = 0; i < groups.size(); i++) {
        if (groups[i] >= counts[index]) {
            groups[i] -= counts[index];
            if (canDistributeHelper(counts, groups, index + 1)) {
                return true;
            }
            groups[i] += counts[index]; // Backtrack
        }
    }

    return false;
}

// Main function to check if integers can be distributed
bool canDistribute(vector<int>& nums, int k) {
    unordered_map<int, int> freqMap;
    for (int num : nums) {
        freqMap[num]++;
    }

    vector<int> counts;
    for (auto& entry : freqMap) {
        counts.push_back(entry.second);
    }

    sort(counts.rbegin(), counts.rend()); // Sort in descending order for efficiency
    vector<int> groups(k, nums.size() / k); // Each group has initial capacity

    return canDistributeHelper(counts, groups, 0);
}

int main() {
    vector<int> nums = {1, 2, 3, 3, 2, 1, 4, 4, 5};
    int k = 3;

    if (canDistribute(nums, k)) {
        cout << "Possible to distribute repeating integers into " << k << " groups.\n";
    } else {
        cout << "Not possible to distribute repeating integers into " << k << " groups.\n";
    }

    return 0;
}
