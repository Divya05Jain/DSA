class Solution {
public:
    // Helper function to recursively generate all valid combinations of parentheses
    void solve(vector<string> &ans, int n, int used_open, int used_close, int rem_open, int rem_close, string output) {
        // Base case: If no open or closed parentheses are left to place, add the current combination to the result
        if (rem_open == 0 && rem_close == 0) {
            ans.push_back(output);
            return;
        }

        // Include an open parenthesis if there are any remaining
        if (rem_open > 0) {
            // Recursively call the function after adding an open parenthesis and reducing the remaining open count
            solve(ans, n, used_open + 1, used_close, rem_open - 1, rem_close, output + '(');
        }

        // Include a close parenthesis if it maintains a valid combination (i.e., we can't have more close than open)
        if (used_open > used_close) {
            // Recursively call the function after adding a close parenthesis and reducing the remaining close count
            solve(ans, n, used_open, used_close + 1, rem_open, rem_close - 1, output + ')');
        }
    }

    // Main function to generate all valid combinations of n pairs of parentheses
    vector<string> generateParenthesis(int n) {
        vector<string> ans; // Vector to store all valid combinations
        int used_open = 0;  // Number of open parentheses used so far
        int used_close = 0; // Number of close parentheses used so far
        int rem_open = n;   // Number of open parentheses left to place
        int rem_close = n;  // Number of close parentheses left to place
        string output = ""; // Current combination being formed

        // Start the recursive process to generate combinations
        solve(ans, n, used_open, used_close, rem_open, rem_close, output);
        
        return ans; // Return the final list of combinations
    }
};
