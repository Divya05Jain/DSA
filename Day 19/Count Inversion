//count inversion using merge sort

#include <iostream>
#include <vector>

using namespace std;

// Merge function to count and sort the array
int mergeAndCount(vector<int>& arr, int left, int mid, int right) {
    int i = left;    // Starting index for the left subarray
    int j = mid + 1; // Starting index for the right subarray
    int k = 0;       // Starting index for the temporary array
    int inversions = 0;

    vector<int> temp(right - left + 1); // Temporary array to store sorted elements

    // Traverse both subarrays and count inversions
    while (i <= mid && j <= right) {
        if (arr[i] <= arr[j]) {
            temp[k++] = arr[i++];
        } else {
            // If arr[i] > arr[j], it means all elements in the left subarray
            // from i to mid are greater than arr[j]
            temp[k++] = arr[j++];
            inversions += (mid - i + 1);
        }
    }

    // Copy the remaining elements from the left subarray
    while (i <= mid) {
        temp[k++] = arr[i++];
    }

    // Copy the remaining elements from the right subarray
    while (j <= right) {
        temp[k++] = arr[j++];
    }

    // Copy sorted elements back to the original array
    for (int p = 0; p < temp.size(); p++) {
        arr[left + p] = temp[p];
    }

    return inversions;
}

// Recursive function to count inversions using merge sort
int mergeSortAndCount(vector<int>& arr, int left, int right) {
    int inversions = 0;

    if (left < right) {
        int mid = left + (right - left) / 2;

        // Count inversions in the left subarray
        inversions += mergeSortAndCount(arr, left, mid);

        // Count inversions in the right subarray
        inversions += mergeSortAndCount(arr, mid + 1, right);

        // Count split inversions and merge the two sorted subarrays
        inversions += mergeAndCount(arr, left, mid, right);
    }

    return inversions;
}

int main() {
    vector<int> arr = {8, 4, 2, 1};
    int n = arr.size();

    int inversionCount = mergeSortAndCount(arr, 0, n - 1);

    cout << "Number of inversions: " << inversionCount << endl;

    return 0;
}
