class Solution {
public:
    bool isSafe(int row, int col, vector<vector<char>>& board, char value) {
        int n = board.size(); // Size of the Sudoku board

        // Check if the value already exists in the row.
        for (int i = 0; i < n; i++) {
            if (board[row][i] == value) // Same value found in the row
                return false;

            // Check if the value already exists in the column.
            if (board[i][col] == value) // Same value found in the column
                return false;

            // Check if the value already exists in the 3x3 sub-grid.
            // Formula calculates the starting cell of the sub-grid and iterates over it.
            if (board[3 * (row / 3) + (i / 3)][3 * (col / 3) + (i % 3)] == value)
                return false;
        }

        // If the value is not found in the row, column, or sub-grid, it's safe to place.
        return true;
    }

    // Recursive function to solve the Sudoku board.
    bool solve(vector<vector<char>>& board) {
        int n = board.size(); // Size of the Sudoku board.

        // Loop through each cell in the board.
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                // Look for an empty cell (denoted by '.').
                if (board[i][j] == '.') {
                    // Try placing digits from '1' to '9' in the empty cell.
                    for (char val = '1'; val <= '9'; val++) {
                        // Check if placing this value is valid.
                        if (isSafe(i, j, board, val)) {
                            // Place the value in the cell.
                            board[i][j] = val;

                            // Recursively attempt to solve the rest of the board.
                            if (solve(board)) {
                                return true; // If the board is solved, we're done.
                            } else {
                                // If placing this value leads to a dead end, undo it (backtrack).
                                board[i][j] = '.';
                            }
                        }
                    }
                    // If no value from '1' to '9' works for this cell, return false to backtrack.
                    return false;
                }
            }
        }

        // If we've filled all cells without returning false, the board is solved.
        return true;
    }

    // Main function to initiate the solving process.
    void solveSudoku(vector<vector<char>>& board) {
        solve(board); // Call the recursive solver on the input board.
    }
};
